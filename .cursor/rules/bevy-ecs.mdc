---
description: 
globs: *.rs
alwaysApply: false
---
# Bevy ECS Architecture Best Practices

## Entity Component System (ECS)

- Use Bevy's ECS as the foundation for all game state and logic
- Components should be small, focused data containers with minimal logic
- Systems should be pure functions that operate on components
- Resources should be used for global/shared state
- Avoid storing references between entities; use entity IDs instead

## Component Design

- Keep components small and focused on a single responsibility
- Use `#[derive(Component)]` for all component structs
- Add `#[derive(Reflect)]` and `#[reflect(Component)]` for components that need reflection
- Implement `Default` for components when sensible
- Use marker components (empty structs) for tagging entities

```rust
// Good component design
#[derive(Component, Reflect, Default)]
#[reflect(Component)]
pub struct Health {
    pub current: f32,
    pub max: f32,
}

// Marker component example
#[derive(Component)]
pub struct Player;
```

## System Organization

- Group related systems into plugins
- Use system sets to define execution order
- Prefer schedule-based execution over manual system chaining
- Use run conditions to control when systems run
- Keep systems small and focused on a single task

```rust
// Good system organization
app.configure_sets(
    Update,
    (
        GameSet::Input,
        GameSet::Physics,
        GameSet::Collision,
        GameSet::Rendering,
    ).chain()
);

// System with run condition
app.add_systems(
    Update,
    update_player_movement.run_if(in_state(GameState::Playing))
);
```

## Query Optimization

- Be specific with queries to avoid unnecessary component access
- Use `With<T>` and `Without<T>` to filter entities without accessing components
- Use `Changed<T>` to only run on entities with modified components
- Consider using `ParamSet` for multiple queries that might conflict
- Use `Option<&T>` for optional component access

```rust
// Optimized query example
fn healing_system(
    time: Res<Time>,
    mut query: Query<(&mut Health, &HealOverTime), Changed<HealOverTime>>
) {
    for (mut health, heal) in &mut query {
        health.current = (health.current + heal.amount * time.delta_seconds())
            .min(health.max);
    }
}
```

## Resource Management

- Use resources for global state and configuration
- Implement `Resource` trait for all resource structs
- Add `#[derive(Reflect)]` and `#[reflect(Resource)]` for resources that need reflection
- Use `Local<T>` for system-local state
- Consider using `NonSend<T>` for resources that shouldn't be sent across threads

```rust
// Good resource design
#[derive(Resource, Reflect)]
#[reflect(Resource)]
pub struct GameSettings {
    pub difficulty: f32,
    pub sound_volume: f32,
    pub music_volume: f32,
}
```
