---
description: 
globs: *.rs
alwaysApply: false
---
# Bevy Assets and Resources Best Practices

## Asset Management

- Use Bevy's asset system for loading and managing game assets
- Organize assets in a logical directory structure
- Use asset handles (`Handle<T>`) to reference assets
- Load assets asynchronously during startup or level loading
- Consider using asset collections for related assets

```rust
// Good asset loading
fn load_assets(
    mut commands: Commands,
    asset_server: Res<AssetServer>,
    mut loading_state: ResMut<NextState<LoadingState>>,
) {
    // Load individual assets
    let player_texture = asset_server.load("textures/player.png");
    let font = asset_server.load("fonts/main.ttf");

    // Load multiple assets with pattern matching
    let ui_textures = asset_server.load_folder("textures/ui").unwrap();

    // Track loading progress
    let loading = asset_server.load_collection::<Vec<Handle<Image>>>(ui_textures);
    commands.insert_resource(AssetsLoading(loading));

    loading_state.set(LoadingState::InProgress);
}

// Check loading progress
fn check_asset_loading(
    mut loading_state: ResMut<NextState<LoadingState>>,
    asset_server: Res<AssetServer>,
    loading: Res<AssetsLoading>,
) {
    use bevy::asset::LoadState;

    match asset_server.get_group_load_state(loading.0.iter().map(|h| h.id())) {
        LoadState::Loaded => {
            loading_state.set(LoadingState::Finished);
        }
        LoadState::Failed => {
            error!("Failed to load some assets");
        }
        _ => {}
    }
}
```

## Custom Asset Types

- Implement `Asset` trait for custom asset types
- Create asset loaders for custom file formats
- Use `AssetServer` to load custom assets
- Consider using asset preprocessing for complex assets
- Use strong typing for different asset categories

```rust
// Custom asset type
#[derive(Asset, TypePath, Debug)]
pub struct TileMap {
    pub tiles: Vec<Vec<TileType>>,
    pub width: usize,
    pub height: usize,
}

// Custom asset loader
#[derive(Default)]
pub struct TileMapLoader;

impl AssetLoader for TileMapLoader {
    fn load<'a>(
        &'a self,
        bytes: &'a [u8],
        load_context: &'a mut LoadContext,
    ) -> BoxedFuture<'a, Result<(), bevy::asset::Error>> {
        Box::pin(async move {
            let tilemap_string = std::str::from_utf8(bytes)?;
            // Parse the tilemap data...
            let tilemap = parse_tilemap(tilemap_string)?;

            load_context.set_default_asset(LoadedAsset::new(tilemap));
            Ok(())
        })
    }

    fn extensions(&self) -> &[&str] {
        &["map"]
    }
}

// Register the asset loader
app.init_asset::<TileMap>()
   .init_asset_loader::<TileMapLoader>();
```

## Hot Reloading

- Enable asset hot reloading during development
- Design systems to handle asset changes gracefully
- Use the `Changed<Assets<T>>` filter for hot reload systems
- Consider performance implications of hot reloading
- Test hot reloading for all asset types

```rust
// Hot reload system
fn hot_reload_textures(
    mut textures: ResMut<Assets<Image>>,
    mut texture_events: EventReader<AssetEvent<Image>>,
) {
    for event in texture_events.read() {
        match event {
            AssetEvent::Modified { handle } => {
                info!("Texture modified: {:?}", handle);
                // Handle the modified texture...
            }
            _ => {}
        }
    }
}

// Register hot reload system
app.add_systems(Update, hot_reload_textures);
```

## Asset Organization

- Use a consistent directory structure for assets
- Group assets by type and/or game area
- Use descriptive filenames
- Consider using asset metadata for additional information
- Document asset requirements and formats

```
assets/
├── textures/
│   ├── characters/
│   │   ├── player.png
│   │   └── enemies/
│   │       ├── slime.png
│   │       └── goblin.png
│   ├── environment/
│   │   ├── tiles.png
│   │   └── props.png
│   └── ui/
│       ├── buttons.png
│       └── icons.png
├── audio/
│   ├── music/
│   │   ├── main_theme.ogg
│   │   └── battle.ogg
│   └── sfx/
│       ├── player/
│       └── enemies/
├── fonts/
│   ├── main.ttf
│   └── title.ttf
└── maps/
    ├── level1.map
    └── level2.map
```

## Resource Lifecycle

- Initialize resources during plugin setup or startup systems
- Use `app.init_resource::<T>()` for resources with `Default` implementation
- Use `app.insert_resource(T)` for resources without `Default`
- Consider resource dependencies when ordering initialization
- Clean up resources when no longer needed

```rust
// Resource initialization
app.init_resource::<GameSettings>()  // Uses Default::default()
   .insert_resource(PlayerStats {    // Custom initialization
       health: 100.0,
       speed: 5.0,
       strength: 10.0,
   });

// Resource cleanup on state change
fn cleanup_level_resources(
    mut commands: Commands,
) {
    commands.remove_resource::<LevelData>();
    commands.remove_resource::<EnemySpawner>();
}

app.add_systems(OnExit(GameState::Level), cleanup_level_resources);
```
