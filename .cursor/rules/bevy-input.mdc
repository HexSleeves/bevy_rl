---
description: 
globs: *.rs
alwaysApply: false
---
# Bevy Input Handling Best Practices

## Input Systems

- Use Bevy's input systems for keyboard, mouse, and gamepad input
- Separate input handling from game logic
- Process input in dedicated systems
- Consider input buffering for action games
- Handle multiple input methods (keyboard, gamepad, touch)

```rust
// Good input system
fn player_input_system(
    keyboard: Res<Input<KeyCode>>,
    gamepad: Res<Input<GamepadButton>>,
    mut player_query: Query<&mut Velocity, With<Player>>,
) {
    if let Ok(mut velocity) = player_query.get_single_mut() {
        let mut direction = Vec2::ZERO;

        // Keyboard input
        if keyboard.pressed(KeyCode::W) || keyboard.pressed(KeyCode::Up) {
            direction.y += 1.0;
        }
        if keyboard.pressed(KeyCode::S) || keyboard.pressed(KeyCode::Down) {
            direction.y -= 1.0;
        }
        if keyboard.pressed(KeyCode::A) || keyboard.pressed(KeyCode::Left) {
            direction.x -= 1.0;
        }
        if keyboard.pressed(KeyCode::D) || keyboard.pressed(KeyCode::Right) {
            direction.x += 1.0;
        }

        // Gamepad input (if available)
        let gamepad_id = Gamepad { id: 0 };
        if gamepad.pressed(GamepadButton { gamepad: gamepad_id, button_type: GamepadButtonType::DPadUp }) {
            direction.y += 1.0;
        }
        // ... other gamepad buttons

        // Normalize and apply
        if direction != Vec2::ZERO {
            direction = direction.normalize();
        }

        velocity.0 = direction * 200.0;
    }
}
```

## Input Mapping

- Create an input mapping layer for abstraction
- Allow remapping of controls
- Use action names instead of direct input codes
- Consider context-sensitive controls
- Support multiple control schemes

```rust
// Input mapping resource
#[derive(Resource)]
pub struct InputMap {
    pub move_up: Vec<InputBinding>,
    pub move_down: Vec<InputBinding>,
    pub move_left: Vec<InputBinding>,
    pub move_right: Vec<InputBinding>,
    pub jump: Vec<InputBinding>,
    pub attack: Vec<InputBinding>,
    // ... other actions
}

#[derive(Clone)]
pub enum InputBinding {
    Keyboard(KeyCode),
    GamepadButton(GamepadButtonType),
    GamepadAxis(GamepadAxisType, f32), // axis and threshold
    MouseButton(MouseButton),
}

impl Default for InputMap {
    fn default() -> Self {
        Self {
            move_up: vec![
                InputBinding::Keyboard(KeyCode::W),
                InputBinding::Keyboard(KeyCode::Up),
                InputBinding::GamepadButton(GamepadButtonType::DPadUp),
            ],
            move_down: vec![
                InputBinding::Keyboard(KeyCode::S),
                InputBinding::Keyboard(KeyCode::Down),
                InputBinding::GamepadButton(GamepadButtonType::DPadDown),
            ],
            // ... other bindings
            jump: vec![
                InputBinding::Keyboard(KeyCode::Space),
                InputBinding::GamepadButton(GamepadButtonType::South),
            ],
            attack: vec![
                InputBinding::MouseButton(MouseButton::Left),
                InputBinding::GamepadButton(GamepadButtonType::West),
            ],
        }
    }
}

// Input system using mapping
fn player_input_system(
    keyboard: Res<Input<KeyCode>>,
    mouse: Res<Input<MouseButton>>,
    gamepad: Res<Input<GamepadButton>>,
    axes: Res<Axis<GamepadAxis>>,
    input_map: Res<InputMap>,
    mut player_query: Query<&mut Velocity, With<Player>>,
) {
    if let Ok(mut velocity) = player_query.get_single_mut() {
        let mut direction = Vec2::ZERO;

        // Check mapped inputs
        if is_action_pressed(&input_map.move_up, &keyboard, &mouse, &gamepad, &axes) {
            direction.y += 1.0;
        }
        if is_action_pressed(&input_map.move_down, &keyboard, &mouse, &gamepad, &axes) {
            direction.y -= 1.0;
        }
        // ... other directions

        // Normalize and apply
        if direction != Vec2::ZERO {
            direction = direction.normalize();
        }

        velocity.0 = direction * 200.0;
    }
}

// Helper function to check if any binding for an action is pressed
fn is_action_pressed(
    bindings: &[InputBinding],
    keyboard: &Input<KeyCode>,
    mouse: &Input<MouseButton>,
    gamepad: &Input<GamepadButton>,
    axes: &Axis<GamepadAxis>,
) -> bool {
    let gamepad_id = Gamepad { id: 0 };

    for binding in bindings {
        match binding {
            InputBinding::Keyboard(key) => {
                if keyboard.pressed(*key) {
                    return true;
                }
            }
            InputBinding::MouseButton(button) => {
                if mouse.pressed(*button) {
                    return true;
                }
            }
            InputBinding::GamepadButton(button_type) => {
                if gamepad.pressed(GamepadButton { gamepad: gamepad_id, button_type: *button_type }) {
                    return true;
                }
            }
            InputBinding::GamepadAxis(axis_type, threshold) => {
                if let Some(value) = axes.get(GamepadAxis { gamepad: gamepad_id, axis_type: *axis_type }) {
                    if value.abs() > *threshold {
                        return true;
                    }
                }
            }
        }
    }

    false
}
```

## Input Events

- Use input events for one-time actions
- Handle just-pressed and just-released events
- Consider input buffering for action games
- Decouple input events from game actions
- Use event propagation for UI interaction

```rust
// Using input events
fn player_action_system(
    keyboard: Res<Input<KeyCode>>,
    mouse: Res<Input<MouseButton>>,
    input_map: Res<InputMap>,
    mut action_events: EventWriter<PlayerActionEvent>,
) {
    // Jump action (just pressed)
    if is_action_just_pressed(&input_map.jump, &keyboard, &mouse) {
        action_events.send(PlayerActionEvent::Jump);
    }

    // Attack action (just pressed)
    if is_action_just_pressed(&input_map.attack, &keyboard, &mouse) {
        action_events.send(PlayerActionEvent::Attack);
    }
}

// Helper function for just pressed actions
fn is_action_just_pressed(
    bindings: &[InputBinding],
    keyboard: &Input<KeyCode>,
    mouse: &Input<MouseButton>,
) -> bool {
    for binding in bindings {
        match binding {
            InputBinding::Keyboard(key) => {
                if keyboard.just_pressed(*key) {
                    return true;
                }
            }
            InputBinding::MouseButton(button) => {
                if mouse.just_pressed(*button) {
                    return true;
                }
            }
            // ... other input types
            _ => {}
        }
    }

    false
}

// Event handler
fn handle_player_actions(
    mut action_events: EventReader<PlayerActionEvent>,
    mut player_query: Query<(&mut Velocity, &mut PlayerState, &Transform), With<Player>>,
    time: Res<Time>,
) {
    if let Ok((mut velocity, mut state, transform)) = player_query.get_single_mut() {
        for action in action_events.read() {
            match action {
                PlayerActionEvent::Jump => {
                    if state.is_grounded {
                        velocity.0.y = 500.0;
                        state.is_grounded = false;
                    }
                }
                PlayerActionEvent::Attack => {
                    state.attack_timer = 0.3;
                    // Spawn attack hitbox, play animation, etc.
                }
                // ... other actions
            }
        }
    }
}
```

## Mouse and Touch Input

- Handle mouse position and movement
- Support touch input for mobile platforms
- Consider multi-touch for mobile games
- Implement drag and gesture recognition
- Handle UI interaction properly

```rust
// Mouse position handling
fn cursor_system(
    windows: Query<&Window>,
    camera_q: Query<(&Camera, &GlobalTransform)>,
    mut cursor_moved_events: EventReader<CursorMoved>,
    mut cursor_pos: ResMut<CursorWorldPosition>,
) {
    // Get the camera
    let (camera, camera_transform) = camera_q.single();

    // Get the window that the camera is displaying to
    let window = windows.single();

    // Update cursor position on move
    for event in cursor_moved_events.read() {
        // Convert screen position to world coordinates
        if let Some(world_position) = window
            .cursor_position()
            .and_then(|cursor| camera.viewport_to_world(camera_transform, cursor))
            .map(|ray| ray.origin.truncate())
        {
            cursor_pos.position = world_position;
        }
    }
}

// Touch input handling
fn touch_system(
    mut touch_events: EventReader<TouchInput>,
    mut touch_positions: ResMut<TouchPositions>,
) {
    for event in touch_events.read() {
        match event.phase {
            TouchPhase::Started => {
                touch_positions.active.insert(event.id, event.position);
            }
            TouchPhase::Moved => {
                touch_positions.active.insert(event.id, event.position);
            }
            TouchPhase::Ended | TouchPhase::Cancelled => {
                touch_positions.active.remove(&event.id);
            }
        }
    }
}
```

## Input Accessibility

- Support multiple input methods
- Allow full control remapping
- Consider accessibility features
- Implement input sensitivity settings
- Support alternative control schemes

```rust
// Input settings resource
#[derive(Resource, Reflect)]
#[reflect(Resource)]
pub struct InputSettings {
    pub mouse_sensitivity: f32,
    pub gamepad_deadzone: f32,
    pub invert_y_axis: bool,
    pub vibration_enabled: bool,
    pub vibration_strength: f32,
    pub auto_aim_enabled: bool,
    pub auto_aim_strength: f32,
}

impl Default for InputSettings {
    fn default() -> Self {
        Self {
            mouse_sensitivity: 1.0,
            gamepad_deadzone: 0.1,
            invert_y_axis: false,
            vibration_enabled: true,
            vibration_strength: 0.7,
            auto_aim_enabled: false,
            auto_aim_strength: 0.3,
        }
    }
}

// Apply input settings
fn apply_input_settings(
    settings: Res<InputSettings>,
    mut axes: ResMut<Axis<GamepadAxis>>,
) {
    // Apply deadzone to all gamepads
    for gamepad in Gamepad::iter() {
        axes.set_deadzone(gamepad, settings.gamepad_deadzone);
    }
}

// Camera control with accessibility options
fn camera_control_system(
    mouse_motion: Res<Events<MouseMotion>>,
    settings: Res<InputSettings>,
    mut camera_query: Query<&mut Transform, With<Camera>>,
) {
    let mut camera_transform = camera_query.single_mut();

    for event in mouse_motion.get_reader().read(&mouse_motion) {
        let mut delta = event.delta * settings.mouse_sensitivity;

        // Apply invert Y if enabled
        if settings.invert_y_axis {
            delta.y = -delta.y;
        }

        // Rotate camera
        camera_transform.rotation *= Quat::from_euler(
            EulerRot::YXZ,
            -delta.x * 0.01,
            -delta.y * 0.01,
            0.0,
        );
    }
}
```
