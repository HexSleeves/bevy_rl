---
description: 
globs: *.rs
alwaysApply: false
---
# Bevy UI and Rendering Best Practices

## UI Structure

- Use Bevy's UI system for game interfaces
- Structure UI with nested nodes and flex layout
- Use style properties for positioning and sizing
- Separate UI logic from rendering
- Consider accessibility in UI design

```rust
// Good UI structure
fn spawn_main_menu(
    mut commands: Commands,
    asset_server: Res<AssetServer>,
) {
    commands
        .spawn(NodeBundle {
            style: Style {
                width: Val::Percent(100.0),
                height: Val::Percent(100.0),
                flex_direction: FlexDirection::Column,
                align_items: AlignItems::Center,
                justify_content: JustifyContent::Center,
                ..default()
            },
            background_color: Color::rgba(0.1, 0.1, 0.1, 0.7).into(),
            ..default()
        })
        .with_children(|parent| {
            // Title
            parent.spawn(TextBundle {
                text: Text::from_section(
                    "My Game",
                    TextStyle {
                        font: asset_server.load("fonts/main.ttf"),
                        font_size: 64.0,
                        color: Color::WHITE,
                    },
                ),
                style: Style {
                    margin: UiRect::all(Val::Px(20.0)),
                    ..default()
                },
                ..default()
            });

            // Buttons container
            parent
                .spawn(NodeBundle {
                    style: Style {
                        flex_direction: FlexDirection::Column,
                        align_items: AlignItems::Center,
                        gap: Size::all(Val::Px(20.0)),
                        ..default()
                    },
                    ..default()
                })
                .with_children(|parent| {
                    spawn_button(parent, "Play", asset_server.load("fonts/main.ttf"), MenuButton::Play);
                    spawn_button(parent, "Settings", asset_server.load("fonts/main.ttf"), MenuButton::Settings);
                    spawn_button(parent, "Quit", asset_server.load("fonts/main.ttf"), MenuButton::Quit);
                });
        });
}
```

## UI Components

- Create reusable UI components
- Use helper functions for common UI elements
- Implement interaction handling for UI elements
- Consider UI state and transitions
- Use markers for UI elements that need special handling

```rust
// Reusable UI component
fn spawn_button(
    parent: &mut ChildBuilder,
    text: &str,
    font: Handle<Font>,
    button_type: MenuButton,
) -> Entity {
    parent
        .spawn((
            ButtonBundle {
                style: Style {
                    width: Val::Px(200.0),
                    height: Val::Px(50.0),
                    justify_content: JustifyContent::Center,
                    align_items: AlignItems::Center,
                    ..default()
                },
                background_color: NORMAL_BUTTON_COLOR.into(),
                ..default()
            },
            button_type,
        ))
        .with_children(|parent| {
            parent.spawn(TextBundle {
                text: Text::from_section(
                    text,
                    TextStyle {
                        font,
                        font_size: 24.0,
                        color: Color::WHITE,
                    },
                ),
                ..default()
            });
        })
        .id()
}

// Button interaction system
fn button_interaction_system(
    mut interaction_query: Query<
        (&Interaction, &mut BackgroundColor, &MenuButton),
        (Changed<Interaction>, With<Button>),
    >,
    mut menu_events: EventWriter<MenuEvent>,
) {
    for (interaction, mut background_color, button_type) in &mut interaction_query {
        match *interaction {
            Interaction::Pressed => {
                *background_color = PRESSED_BUTTON_COLOR.into();
                menu_events.send(MenuEvent::Clicked(*button_type));
            }
            Interaction::Hovered => {
                *background_color = HOVERED_BUTTON_COLOR.into();
            }
            Interaction::None => {
                *background_color = NORMAL_BUTTON_COLOR.into();
            }
        }
    }
}
```

## Rendering Optimization

- Use sprite batching for similar sprites
- Consider texture atlases for related sprites
- Use instancing for repeated meshes
- Implement culling for off-screen entities
- Profile rendering performance regularly

```rust
// Sprite batching with texture atlas
fn setup_sprites(
    mut commands: Commands,
    asset_server: Res<AssetServer>,
    mut texture_atlases: ResMut<Assets<TextureAtlas>>,
) {
    let texture_handle = asset_server.load("textures/sprites.png");
    let texture_atlas = TextureAtlas::from_grid(
        texture_handle,
        Vec2::new(32.0, 32.0),  // sprite size
        8,                      // columns
        4,                      // rows
        Some(Vec2::new(1.0, 1.0)), // padding
        None,                   // offset
    );
    let texture_atlas_handle = texture_atlases.add(texture_atlas);

    // Spawn sprite with atlas
    commands.spawn(SpriteSheetBundle {
        texture_atlas: texture_atlas_handle,
        sprite: TextureAtlasSprite::new(0), // index in the atlas
        transform: Transform::from_translation(Vec3::new(0.0, 0.0, 0.0)),
        ..default()
    });
}

// Culling system
fn cull_distant_entities(
    mut commands: Commands,
    camera_query: Query<&Transform, With<Camera>>,
    entity_query: Query<(Entity, &Transform, &CullableEntity)>,
) {
    if let Ok(camera_transform) = camera_query.get_single() {
        let camera_pos = camera_transform.translation.truncate();

        for (entity, transform, cullable) in &entity_query {
            let distance = camera_pos.distance(transform.translation.truncate());

            if distance > cullable.cull_distance {
                commands.entity(entity).insert(Visibility::Hidden);
            } else {
                commands.entity(entity).insert(Visibility::Visible);
            }
        }
    }
}
```

## Camera Setup

- Configure camera for your game's needs
- Consider multiple cameras for different views
- Use camera projection appropriate for your game style
- Implement smooth camera movement
- Handle window resizing gracefully

```rust
// Camera setup for 2D game
fn setup_camera(mut commands: Commands) {
    commands.spawn(Camera2dBundle {
        transform: Transform::from_translation(Vec3::new(0.0, 0.0, 999.9)),
        ..default()
    });
}

// Camera setup for 3D game
fn setup_camera_3d(mut commands: Commands) {
    commands.spawn(Camera3dBundle {
        transform: Transform::from_xyz(-2.0, 2.5, 5.0).looking_at(Vec3::ZERO, Vec3::Y),
        ..default()
    });
}

// Smooth camera follow system
fn camera_follow_system(
    time: Res<Time>,
    player_query: Query<&Transform, (With<Player>, Without<Camera>)>,
    mut camera_query: Query<&mut Transform, With<Camera>>,
) {
    if let Ok(player_transform) = player_query.get_single() {
        if let Ok(mut camera_transform) = camera_query.get_single_mut() {
            let target = player_transform.translation;
            let current = camera_transform.translation;

            // Smooth interpolation
            let new_position = current.lerp(
                Vec3::new(target.x, target.y, current.z),
                time.delta_seconds() * 5.0,
            );

            camera_transform.translation = new_position;
        }
    }
}
```

## UI Responsiveness

- Design UI to adapt to different screen sizes
- Use relative positioning and sizing (percentages)
- Test UI on multiple resolutions
- Handle aspect ratio changes
- Consider touch/mouse input differences

```rust
// Responsive UI
fn spawn_responsive_ui(mut commands: Commands, asset_server: Res<AssetServer>) {
    commands
        .spawn(NodeBundle {
            style: Style {
                width: Val::Percent(100.0),
                height: Val::Percent(100.0),
                flex_direction: FlexDirection::Column,
                ..default()
            },
            ..default()
        })
        .with_children(|parent| {
            // Header - fixed height
            parent.spawn(NodeBundle {
                style: Style {
                    width: Val::Percent(100.0),
                    height: Val::Px(80.0),
                    ..default()
                },
                background_color: Color::rgb(0.3, 0.3, 0.3).into(),
                ..default()
            });

            // Content - flexible height
            parent.spawn(NodeBundle {
                style: Style {
                    width: Val::Percent(100.0),
                    height: Val::Percent(100.0),
                    flex_direction: FlexDirection::Row,
                    ..default()
                },
                ..default()
            })
            .with_children(|parent| {
                // Sidebar - fixed width
                parent.spawn(NodeBundle {
                    style: Style {
                        width: Val::Px(200.0),
                        height: Val::Percent(100.0),
                        ..default()
                    },
                    background_color: Color::rgb(0.2, 0.2, 0.2).into(),
                    ..default()
                });

                // Main content - flexible width
                parent.spawn(NodeBundle {
                    style: Style {
                        width: Val::Percent(100.0),
                        height: Val::Percent(100.0),
                        ..default()
                    },
                    background_color: Color::rgb(0.1, 0.1, 0.1).into(),
                    ..default()
                });
            });
        });
}

// Window resize handling
fn handle_window_resize(
    mut resize_events: EventReader<WindowResized>,
    mut ui_scale: ResMut<UiScale>,
) {
    for event in resize_events.read() {
        let width = event.width;
        let height = event.height;

        // Adjust UI scale based on resolution
        let base_resolution = 1920.0;
        let scale_factor = width / base_resolution;
        ui_scale.0 = scale_factor;
    }
}
```
